# Command to produce graphical output
runAll()
# Parameters for the solver
param <- c(alpha = 10,
beta = 8/4,
c = 28)
# Initial state
yini <- c(x = 0.00, y = 0.0, z = 0.0)
# Lorenz function
lorenz <- function(Time, State, Param) {
with(as.list(c(State, Param)), {
xdot <- alpha * (y - x)
ydot <- x * (c - z) - y
zdot <- x*y - beta*z
return(list(c(xdot, ydot, zdot)))
})
}
# Run function
runIt <- function(times) {
out <- as.data.frame(ode(func = lorenz, y = yini, parms = param, times = times))
scatterplot3d(x=out[,2],
y=out[,3],
z=out[,4],
color="black",
type="l",
box=FALSE,
highlight.3d=F,
grid=F,
axis=F,
xlab=NULL,
ylab=NULL,
zlab=NULL,
main=NULL)
}
# Run All function combining functions
runAll <- function() {
runIt(seq(0, 100, by=0.01))
}
# Command to produce graphical output
runAll()
# Initial state
yini <- c(x = 0.00001, y = 0.0, z = 0.0)
# Lorenz function
lorenz <- function(Time, State, Param) {
with(as.list(c(State, Param)), {
xdot <- alpha * (y - x)
ydot <- x * (c - z) - y
zdot <- x*y - beta*z
return(list(c(xdot, ydot, zdot)))
})
}
# Run function
runIt <- function(times) {
out <- as.data.frame(ode(func = lorenz, y = yini, parms = param, times = times))
scatterplot3d(x=out[,2],
y=out[,3],
z=out[,4],
color="black",
type="l",
box=FALSE,
highlight.3d=F,
grid=F,
axis=F,
xlab=NULL,
ylab=NULL,
zlab=NULL,
main=NULL)
}
# Run All function combining functions
runAll <- function() {
runIt(seq(0, 100, by=0.01))
}
# Command to produce graphical output
runAll()
# Run function
runIt <- function(times) {
out <- as.data.frame(ode(func = lorenz, y = yini, parms = param, times = times))
scatterplot3d(x=out[,2],
y=out[,3],
z=out[,4],
color="black",
type="l",
box=TRUE,
highlight.3d=T,
grid=T,
axis=T,
xlab=4,
ylab=3,
zlab=2,
main=1)
}
# Run All function combining functions
runAll <- function() {
runIt(seq(0, 100, by=0.01))
}
# Command to produce graphical output
runAll()
# Run function
runIt <- function(times) {
out <- as.data.frame(ode(func = lorenz, y = yini, parms = param, times = times))
scatterplot3d(x=out[,2],
y=out[,3],
z=out[,4],
color="black",
type="l",
box=TRUE,
highlight.3d=T,
grid=T,
axis=T,
xlab=NULL,
ylab=NULL,
zlab=NULL,
main=NULL)
}
# Run All function combining functions
runAll <- function() {
runIt(seq(0, 100, by=0.01))
}
# Command to produce graphical output
runAll()
# Run function
runIt <- function(times) {
out <- as.data.frame(ode(func = lorenz, y = yini, parms = param, times = times))
scatterplot3d(x=out[,2],
y=out[,3],
z=out[,4],
color="black",
type="l",
box=TRUE,
highlight.3d=T,
grid=T,
axis=T,
xlab="x",
ylab="y",
zlab="z",
main=NULL)
}
# Run All function combining functions
runAll <- function() {
runIt(seq(0, 100, by=0.01))
}
# Command to produce graphical output
runAll()
# Run function
runIt <- function(times) {
out <- as.data.frame(ode(func = lorenz, y = yini, parms = param, times = times))
scatterplot3d(x=out[,2],
y=out[,3],
z=out[,4],
color="yellow",
type="l",
box=TRUE,
highlight.3d=T,
grid=T,
axis=T,
xlab="x",
ylab="y",
zlab="z",
main=NULL)
}
# Run All function combining functions
runAll <- function() {
runIt(seq(0, 100, by=0.01))
}
# Command to produce graphical output
runAll()
# Run function
runIt <- function(times) {
out <- as.data.frame(ode(func = lorenz, y = yini, parms = param, times = times))
scatterplot3d(x=out[,2],
y=out[,3],
z=out[,4],
color="green",
type="l",
box=TRUE,
highlight.3d=T,
grid=T,
axis=T,
xlab="x",
ylab="y",
zlab="z",
main=NULL)
}
# Run All function combining functions
runAll <- function() {
runIt(seq(0, 100, by=0.01))
}
# Command to produce graphical output
runAll()
# Run function
runIt <- function(times) {
out <- as.data.frame(ode(func = lorenz, y = yini, parms = param, times = times))
scatterplot3d(x=out[,2],
y=out[,3],
z=out[,4],
color="blue",
type="l",
box=TRUE,
highlight.3d=T,
grid=T,
axis=T,
xlab="x",
ylab="y",
zlab="z",
main=NULL)
}
# Run All function combining functions
runAll <- function() {
runIt(seq(0, 100, by=0.01))
}
# Command to produce graphical output
runAll()
# Run function
runIt <- function(times) {
out <- as.data.frame(ode(func = lorenz, y = yini, parms = param, times = times))
scatterplot3d(x=out[,2],
y=out[,3],
z=out[,4],
color="red",
type="l",
box=TRUE,
highlight.3d=T,
grid=T,
axis=T,
xlab="x",
ylab="y",
zlab="z",
main=NULL)
}
# Run All function combining functions
runAll <- function() {
runIt(seq(0, 100, by=0.01))
}
# Command to produce graphical output
runAll()
# Run function
runIt <- function(times) {
out <- as.data.frame(ode(func = lorenz, y = yini, parms = param, times = times))
scatterplot3d(x=out[,2],
y=out[,3],
z=out[,4],
color="black",
type="l",
box=FALSE,
highlight.3d=F,
grid=F,
axis=F,
xlab=NULL,
ylab=NULL,
zlab=NULL,
main=NULL)
}
# Run All function combining functions
runAll <- function() {
runIt(seq(0, 100, by=0.01))
}
# Command to produce graphical output
runAll()
# Initial state
yini <- c(x = 0.00001, y = 0.8, z = 0.7)
# Lorenz function
lorenz <- function(Time, State, Param) {
with(as.list(c(State, Param)), {
xdot <- alpha * (y - x)
ydot <- x * (c - z) - y
zdot <- x*y - beta*z
return(list(c(xdot, ydot, zdot)))
})
}
# Run function
runIt <- function(times) {
out <- as.data.frame(ode(func = lorenz, y = yini, parms = param, times = times))
scatterplot3d(x=out[,2],
y=out[,3],
z=out[,4],
color="black",
type="l",
box=FALSE,
highlight.3d=F,
grid=F,
axis=F,
xlab=NULL,
ylab=NULL,
zlab=NULL,
main=NULL)
}
# Run All function combining functions
runAll <- function() {
runIt(seq(0, 100, by=0.01))
}
# Command to produce graphical output
runAll()
out <- as.data.frame(ode(func = lorenz, y = yini, parms = param, times = times))
lorenz
out
## export of ggplot2 plot
library(ggplot2)
qplot(x,y,z, data = out)
qplot(x,y,z, data = out)
qplot(out.x,out.y,out.z, data = out)
set.seed(417)
library(plotly)
set.seed(417)
library(plotly)
temp <- rnorm(100, mean=30, sd=5)
pressure <- rnorm(100)
set.seed(417)
library(plotly)
temp <- rnorm(100, mean=30, sd=5)
pressure <- rnorm(100)
dtime <- 1:100
plot_ly(x=temp, y=pressure, z=dtime, type="scatter3d", mode="markers", color=temp)
out[1]
out
x <- out[2]
y <- out[3]
z <- out[4]
install.packages('rgl')
library(rgl)
plot3d(x, y, z)
rgl.snapshot("rgl.snapshot.png")
library(rgl)
x <- out[2]
y <- out[3]
z <- out[4]
plot3d(x, y, z)
plot3d(x, y, z)
rgl.snapshot("rgl.snapshot.png")
# Create a scatterplot in a PDF file
pdf("scatterplot3d_plot.pdf")
x <- out[2]
y <- out[3]
z <- out[4]
scatterplot3d(x, y, z)
scatterplot3d(x, y, z)
x <- out[2]
out[2]
out[3]
out[4]
x <- Vectorize(out[2])
Vectorize(out[2])
# Create a scatterplot in a PDF file
pdf("scatterplot3d_plot.pdf")
# Generate a sample 3D scatterplot
x <- out[2]
y <- out[3]
z <- out[4]
scatterplot3d(x, y, z)
class(x)
class(y)
class(z)
class(x)
out
x <- out$x
y <- out$y
z <- out$z
scatterplot3d(x, y, z)
# Close the PDF device
dev.off()
# Create a scatterplot in a PDF file
pdf("scatterplot3d_plot.pdf")
# Generate a sample 3D scatterplot
x <- out$x
y <- out$y
z <- out$z
scatterplot3d(x, y, z, type='l')
# Close the PDF device
dev.off()
# Generate a sample 3D scatterplot
x <- out$x
y <- out$y
z <- out$z
scatterplot3d(x=out[,2],
y=out[,3],
z=out[,4],
color="black",
type="l",
box=FALSE,
highlight.3d=F,
grid=F,
axis=F,
xlab=NULL,
ylab=NULL,
zlab=NULL,
main=NULL)
# Close the PDF device
dev.off()
# Create a scatterplot in a PDF file
pdf("lorenz_attractor_plot.pdf")
x <- out$x
y <- out$y
z <- out$z
scatterplot3d(x=x,
y=y,
z=z,
color="black",
type="l",
box=FALSE,
highlight.3d=F,
grid=F,
axis=F,
xlab=NULL,
ylab=NULL,
zlab=NULL,
main=NULL)
# Close the PDF device
dev.off()
library(ggplot2)
# Create a ggplot2 plot
gg <- ggplot(data = your_data, aes(x = x, y = y, z = z)) +
geom_line()
gg <- ggplot(data = out, aes(x = x, y = y, z = z)) +
geom_line()
# Save as a PDF file
ggsave("output_plot.pdf", plot = gg)
library(plotly)
install.packages('plotly')
library(plotly)
# Create a 3D line plot with plotly
plot_ly(data = out, x = ~x, y = ~y, z = ~z, type = "scatter3d", mode = "lines")
# Save as a PDF file
orca("lorenz_attractor_plot_2.pdf")
# Save as a PDF file
kaleido("lorenz_attractor_plot_2.pdf")
install.packaged('orca')
install.packages('orca')
graph <- plot_ly(data = out, x = ~x, y = ~y, z = ~z, type = "scatter3d", mode = "lines")
# Save as a PDF file
orca(graph, "lorenz_attractor_plot_2.pdf")
kaleido(graph, "lorenz_attractor_plot_2.pdf")
install.packages('processx')
library(plotly)
library(orca)
library(processx)
graph <- plot_ly(data = out, x = ~x, y = ~y, z = ~z, type = "scatter3d", mode = "lines")
orca(graph, "lorenz_attractor_plot_2.pdf")
# Save as a PDF file
orca(graph, "lorenz_attractor_plot_2.svg")
setwd("D:/Dokumenty/Studia/Semestr_5/Rozmyte Systemy Wspomagania Decyzji/RSWD_Zadanie_1")
reticulate::repl_python()
from fuzzysets import TFN
from fuzzysets import TFN
import numpy as np
import matplotlib.pyplot as plt
quit
2+2
library(sets)
install.packages('sets')
library(sets)
sets_options("universe", seq(1, 100, 0.5))
sets_options("universe", seq(1, 9, 1))
variables <- set(
price = fuzzy_partition(varnames = c(bad = 300, ok = 250, good = 200), FUN = fuzzy_triangle, radius = 1),
memory = fuzzy_partition(varnames = c(bad = 16, ok = 24, good = 32), FUN = fuzzy_triangle, radius = 1),
camera = fuzzy_partition(varnames = c(bad = 8, ok = 12, good = 16), FUN = fuzzy_triangle, radius = 1),
looks = fuzzy_partition(varnames = c(bad = 2, ok = 3.5, good = 5), FUN = fuzzy_triangle, radius = 1)
)
library(sets)
sets_options("universe", seq(1, 9, 0.1))
# 'universe' dlatego, że ustawiamy 'uniwersum' licz rozmytych
# 1 to dolny zakres, 100 to gorny zakres, 0.5 to inkrementalna roznica miedzy kazda wartością
variables <- set(
price = fuzzy_partition(varnames = c(bad = 300, ok = 250, good = 200), FUN = 'fuzzy_triangle', radius = 1),
memory = fuzzy_partition(varnames = c(bad = 16, ok = 24, good = 32), FUN = 'fuzzy_triangle', radius = 1),
camera = fuzzy_partition(varnames = c(bad = 8, ok = 12, good = 16), FUN = 'fuzzy_triangle', radius = 1),
looks = fuzzy_partition(varnames = c(bad = 2, ok = 3.5, good = 5), FUN = 'fuzzy_triangle', radius = 1)
)
sets_options("universe", seq(1, 9, 0.1))
variables <- set(
price = fuzzy_partition(varnames = c(bad = 300, ok = 250, good = 200), FUN = 'fuzzy_triangle', radius = 1),
memory = fuzzy_partition(varnames = c(bad = 16, ok = 24, good = 32), FUN = 'fuzzy_triangle', radius = 1),
camera = fuzzy_partition(varnames = c(bad = 8, ok = 12, good = 16), FUN = 'fuzzy_triangle', radius = 1),
looks = fuzzy_partition(varnames = c(bad = 2, ok = 3.5, good = 5), FUN = 'fuzzy_triangle', radius = 1)
)
variables <- set(
price = fuzzy_partition(varnames = c(bad = 300, ok = 250, good = 200), FUN = 'fuzzy_triangle', radius = 1),
memory = fuzzy_partition(varnames = c(bad = 16, ok = 24, good = 32), FUN = 'fuzzy_triangle', radius = 1),
camera = fuzzy_partition(varnames = c(bad = 8, ok = 12, good = 16), FUN = 'fuzzy_triangle', radius = 1),
looks = fuzzy_partition(varnames = c(bad = 2, ok = 3.5, good = 5), FUN = 'fuzzy_triangle', radius = 1)
)
variables <- set(
price = fuzzy_partition(varnames = c(bad = 300, ok = 250, good = 200), FUN = 'fuzzy_triangle', radius = 1),
memory = fuzzy_partition(varnames = c(bad = 16, ok = 24, good = 32), FUN = 'fuzzy_triangle', radius = 1),
camera = fuzzy_partition(varnames = c(bad = 8, ok = 12, good = 16), FUN = 'fuzzy_triangle', radius = 1),
looks = fuzzy_partition(varnames = c(bad = 2, ok = 3.5, good = 5), FUN = 'fuzzy_triangle', radius = 1)
)
variables <- set(
price = fuzzy_partition(varnames = c(bad = 300, ok = 250, good = 200), FUN = 'fuzzy_triangle', radius = 1),
memory = fuzzy_partition(varnames = c(bad = 16, ok = 24, good = 32), FUN = 'fuzzy_triangle', radius = 1),
camera = fuzzy_partition(varnames = c(bad = 8, ok = 12, good = 16), FUN = 'fuzzy_triangle', radius = 1),
looks = fuzzy_partition(varnames = c(bad = 2, ok = 3.5, good = 5), FUN = 'fuzzy_triangle', radius = 1)
)
variables <- set(
price = fuzzy_partition(varnames = c(bad = 300, ok = 250, good = 200), FUN = 'fuzzy_triangle', radius = 1),
memory = fuzzy_partition(varnames = c(bad = 16, ok = 24, good = 32), FUN = 'fuzzy_triangle', radius = 1),
camera = fuzzy_partition(varnames = c(bad = 8, ok = 12, good = 16), FUN = 'fuzzy_triangle', radius = 1),
looks = fuzzy_partition(varnames = c(bad = 2, ok = 3.5, good = 5), FUN = 'fuzzy_triangle', radius = 1)
)
variables <- set(
price = fuzzy_partition(varnames = c(bad = 300, ok = 250, good = 200), FUN = fuzzy_triangle, radius = 1),
memory = fuzzy_partition(varnames = c(bad = 16, ok = 24, good = 32), FUN = fuzzy_triangle, radius = 1),
camera = fuzzy_partition(varnames = c(bad = 8, ok = 12, good = 16), FUN = fuzzy_triangle, radius = 1),
looks = fuzzy_partition(varnames = c(bad = 2, ok = 3.5, good = 5), FUN = fuzzy_triangle, radius = 1)
)
variables <- set(
price = fuzzy_partition(varnames = c(bad = 300, ok = 250, good = 200), FUN = fuzzy_cone, radius = 1),
memory = fuzzy_partition(varnames = c(bad = 16, ok = 24, good = 32), FUN = fuzzy_cone, radius = 1),
camera = fuzzy_partition(varnames = c(bad = 8, ok = 12, good = 16), FUN = fuzzy_cone, radius = 1),
looks = fuzzy_partition(varnames = c(bad = 2, ok = 3.5, good = 5), FUN = fuzzy_cone, radius = 1)
)
View(variables)
View(variables)
