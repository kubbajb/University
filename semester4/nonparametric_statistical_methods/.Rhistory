data$avg_chisq_p_val <- mapply(chisq_p_val, data$n, data$df, data$cuts)
data <- expand.grid(n = c(5, 10, 15, 30, 40, 50), df = c(3, 4, 5, 6, 7, 8, 10, 15, 20, 30, 40), cuts = c(3, 5, 10, 15, 20))
data$avg_chisq_p_val <- mapply(chisq_p_val, data$n, data$df, data$cuts)
# sample data
data <- rt(n = n, df = dgf)
data
# calculate the theoretical probabilities of the values
pdf_probabilities <- dt(1:(length(cut_points)-1), dgf)
pdf_probabilities
plot(pdf_probabilities)
# calculate the theoretical probabilities of the values
pdf_probabilities <- dt(1:(length(cut_points)-1), dgf)
pdf_probabilities <- c(pdf_probabilities,1-sum(pdf_probabilities))
plot(pdf_probabilities)
hist(data)
# division into bins
lowest <- 0
# sample data
data <- rt(n = n, df = dgf)
hist(data)
# sample data
data <- rt(n = n, df = dgf)
hist(data)
# sample data
data <- rt(n = n, df = dgf)
hist(data)
# calculate the theoretical probabilities of the values
pdf_probabilities <- dt(1:(length(cut_points)-1), dgf)
pdf_probabilities
hist(pdf_probabilities)
pdf_probabilities <- dt(1:(length(cut_points)-1), dgf)
pdf_probabilities <- c(pdf_probabilities,1-sum(pdf_probabilities))
hist(pdf_probabilities)
pdf_probabilities <- dt(1:(length(cut_points)-1), dgf)
pdf_probabilities <- c(pdf_probabilities,1-sum(pdf_probabilities))
hist(pdf_probabilities)
pdf_probabilities <- dt(1:(length(cut_points)-1), dgf)
pdf_probabilities <- c(pdf_probabilities,1-sum(pdf_probabilities))
hist(pdf_probabilities)
pdf_probabilities <- dt(1:(length(cut_points)-1), dgf)
pdf_probabilities <- c(pdf_probabilities,1-sum(pdf_probabilities))
hist(pdf_probabilities)
pdf_probabilities <- dt(1:(length(cut_points)-1), dgf)
pdf_probabilities <- c(pdf_probabilities,1-sum(pdf_probabilities))
hist(pdf_probabilities)
pdf_probabilities <- dt(1:(length(cut_points)-1), dgf)
pdf_probabilities <- c(pdf_probabilities,1-sum(pdf_probabilities))
hist(pdf_probabilities)
# calculate the theoretical probabilities of the values
pdf_probabilities <- dt(1:(30-1), dgf)
pdf_probabilities
hist(pdf_probabilities)
plot(pdf_probabilities)
# calculate the theoretical probabilities of the values
pdf_probabilities <- dt(-20:20, dgf)
pdf_probabilities
hist(pdf_probabilities)
plot(pdf_probabilities)
# calculate the theoretical probabilities of the values
pdf_probabilities <- dt(-10:10, dgf)
pdf_probabilities <- c(pdf_probabilities,1-sum(pdf_probabilities))
hist(pdf_probabilities)
plot(pdf_probabilities)
# calculate the theoretical probabilities of the values
pdf_probabilities <- dt(-10:10, dgf)
plot(pdf_probabilities)
# sample data
data <- rt(n = n, df = dgf)
n <- 100
dgf <- 10
cuts <- 10
pvals <- c()
# sample data
data <- rt(n = n, df = dgf)
hist(data)
# division into bins
lowest <- min(data)
largest <- max(data)
cut_points <- seq(lowest, largest, length.out = cuts)
cut_points
# calculate the theoretical probabilities of the values
pdf_probabilities <- dt(lowest:largest, dgf)
pdf_probabilities
pdf_probabilities <- c(pdf_probabilities,1-sum(pdf_probabilities))
hist(pdf_probabilities)
plot(pdf_probabilities)
hist(data)
# sample binning
observed <- c()
for (i in 0:length(cut_points)){
observed[i] <- as.numeric(sum(data > cut_points[i] & na.omit(data <= cut_points[i+1])))
}
observed
hisq.test(x = observed, p = pdf_probabilities)$p.value
chisq.test(x = observed, p = pdf_probabilities)$p.value
pdf_probabilities
observed
# calculate the theoretical probabilities of the values
pdf_probabilities <- dt(lowest:largest, dgf)
pdf_probabilities
# division into bins
lowest <- min(data)
largest <- max(data)
cut_points <- seq(lowest, largest, length.out = cuts)
# calculate the theoretical probabilities of the values
pdf_probabilities <- dt(lowest:largest, dgf)
pdf_probabilities <- c((1-sum(pdf_probabilities))/2, pdf_probabilities,(1-sum(pdf_probabilities))/2)
pdf_probabilities
# sample binning
observed <- c()
for (i in 0:length(cut_points)){
observed[i] <- as.numeric(sum(data > cut_points[i] & na.omit(data <= cut_points[i+1])))
}
chisq.test(x = observed, p = pdf_probabilities)$p.value
pdf_probabilities
observed
# sample binning
observed <- c()
for (i in 1:length(cut_points)){
observed[i] <- as.numeric(sum(data > cut_points[i] & na.omit(data <= cut_points[i+1])))
}
observed
# sample binning
observed <- c()
for (i in 1:length(cut_points)-1){
observed[i] <- as.numeric(sum(data > cut_points[i] & na.omit(data <= cut_points[i+1])))
}
observed
# calculate the theoretical probabilities of the values
pdf_probabilities <- dt(lowest:largest, dgf)
pdf_probabilities <- c((1-sum(pdf_probabilities))/2, pdf_probabilities,(1-sum(pdf_probabilities))/2)
# sample binning
observed <- c()
for (i in 1:length(cut_points)-1){
observed[i] <- as.numeric(sum(data > cut_points[i] & na.omit(data <= cut_points[i+1])))
}
pval <- chisq.test(x = observed, p = pdf_probabilities)$p.value
chisq.test(x = observed, p = pdf_probabilities)$p.value
chisq.test(x = observed, p = pdf_probabilities)$p.value
chisq.test(x = observed, p = pdf_probabilities)$p.value
ks_df_power <- function(df, n){
power <- c()
for (i in 0:100){
data <- rt(n = n, df = df)
data <- data - mean(data)
power[i] <- ks.test(data,"pt", n-1)$p.val
}
return (mean(power))
}
ks_df_power(10, 10)
ks_df_power(10, 10)
ks_df_power(10, 10)
chisq_power <- function(n, dgf, cuts){
pvals <- c()
# simulation loop
for (j in 0:100){
# sample data
data <- rt(n = n, df = dgf)
# division into bins
lowest <- min(data)
largest <- max(data)
cut_points <- seq(lowest, largest, length.out = cuts)
# calculate the theoretical probabilities of the values
pdf_probabilities <- dt(lowest:largest, dgf)
pdf_probabilities <- c((1-sum(pdf_probabilities))/2, pdf_probabilities,(1-sum(pdf_probabilities))/2)
# sample binning
observed <- c()
for (i in 1:length(cut_points)-1){
observed[i] <- as.numeric(sum(data > cut_points[i] & na.omit(data <= cut_points[i+1])))
}
pval <- chisq.test(x = observed, p = pdf_probabilities)$p.value
pvals[j] <- pval
}
return(mean(pvals))
}
chisq_power(10, 10, 10)
n <- 10
dgf <- 10
cuts <- 10
# sample data
data <- rt(n = n, df = dgf)
# division into bins
lowest <- min(data)
largest <- max(data)
cut_points <- seq(lowest, largest, length.out = cuts)
cut_points
# calculate the theoretical probabilities of the values
pdf_probabilities <- dt(lowest:largest, dgf)
pdf_probabilities <- c((1-sum(pdf_probabilities))/2, pdf_probabilities,(1-sum(pdf_probabilities))/2)
pdf_probabilities
# calculate the theoretical probabilities of the values
pdf_probabilities <- dt(seq(lowest, largest, length.out = cuts), dgf)
pdf_probabilities
# sample data
data <- rt(n = n, df = dgf)
# division into bins
lowest <- min(data)
largest <- max(data)
cut_points <- seq(lowest, largest, length.out = cuts)
# calculate the theoretical probabilities of the values
pdf_probabilities <- dt(seq(lowest, largest, length.out = cuts), dgf)
pdf_probabilities <- c((1-sum(pdf_probabilities))/2, pdf_probabilities,(1-sum(pdf_probabilities))/2)
pdf_probabilities
# calculate the theoretical probabilities of the values
pdf_probabilities <- dt(seq(lowest, largest, length.out = cuts), dgf)
pdf_probabilities
sum(pdf_probabilities)
sum(pdf_probabilities)
hist(pdf_probabilities)
plot(pdf_probabilities)
# calculate the theoretical probabilities of the values
pdf_probabilities <- dt(seq(lowest, largest, length.out = cuts), dgf)
pdf_probabilities <- c((1-sum(pdf_probabilities))/2, pdf_probabilities,(1-sum(pdf_probabilities))/2)
plot(pdf_probabilities)
sum(pdf_probabilities)
sum(pdf_probabilities)
# calculate the theoretical probabilities of the values
pdf_probabilities <- dt(seq(lowest, largest, length.out = cuts), dgf)
sum(pdf_probabilities)
# calculate the theoretical probabilities of the values
pdf_probabilities <- dt(seq(lowest, largest, length.out = cuts), dgf)
pdf_probabilities
seq(lowest, largest, length.out = cuts)
# calculate the theoretical probabilities of the values
pdf_probabilities <- pt(seq(lowest, largest, length.out = cuts), dgf)
pdf_probabilities
plot(pdf_probabilities)
sum(pdf_probabilities)
pdf_probabilities <- c(pdf_probabilities,(1-sum(pdf_probabilities))/2)
plot(pdf_probabilities)
# calculate the theoretical probabilities of the values
pdf_probabilities <- pt(seq(lowest, largest, length.out = cuts), dgf)
pdf_probabilities
# calculate the theoretical probabilities of the values
pdf_probabilities <- pt(seq(lowest, largest, length.out = cuts), dgf)
pdf_probabilities <- c(pdf_probabilities-pdf_probabilities[-1])
# calculate the theoretical probabilities of the values
pdf_probabilities <- pt(seq(lowest, largest, length.out = cuts), dgf)
pdf_probabilities <- c(pdf_probabilities-lag(pdf_probabilities, n=1))
pdf_probabilities
plot(pdf_probabilities)
sum(pdf_probabilities)
sum(pdf_probabilities)
sum(pdf_probabilities, na.rm=TRUE)
# calculate the theoretical probabilities of the values
pdf_probabilities <- pt(seq(lowest, largest, length.out = cuts), dgf)
pdf_probabilities <- c(pdf_probabilities-na.omit(lag(pdf_probabilities, n=1)))
# calculate the theoretical probabilities of the values
pdf_probabilities <- pt(seq(lowest, largest, length.out = cuts), dgf)
pdf_probabilities <- c(pdf_probabilities-na.omit(lag(pdf_probabilities, n=1)))
pdf_probabilities <- c(pdf_probabilities-lag(na.omit(pdf_probabilities, n=1)))
pdf_probabilities
pdf_probabilities <- c(pdf_probabilities-lag(pdf_probabilities, n=1))
pdf_probabilities <- c(pdf_probabilities-ifelse(is.numeric(lag(pdf_probabilities, n=1))=TRUE, lag(pdf_probabilities, n=1), 0)
pdf_probabilities <-
c(pdf_probabilities-ifelse(is.numeric(lag(pdf_probabilities, n=1))=TRUE, lag(pdf_probabilities, n=1), 0))
# calculate the theoretical probabilities of the values
pdf_probabilities <- pt(seq(lowest, largest, length.out = cuts), dgf)
pdf_probabilities <-
c(pdf_probabilities-ifelse(is.numeric(lag(pdf_probabilities, n=1))=TRUE, lag(pdf_probabilities, n=1), 0))
library(ggplot2)
library(nortest)
library(stats)
set.seed(123)
# Function to perform the tests and calculate rejection percentage
perform_tests <- function(df, n_data, n_simulations) {
rejection_kolmogorov_classical <- vector("numeric", n_simulations)
rejection_kolmogorov_pit <- vector("numeric", n_simulations)
rejection_chi2_classical <- vector("numeric", n_simulations)
rejection_chi2_pit <- vector("numeric", n_simulations)
for (i in 1:n_simulations) {
# Generate data from t-Student distribution
data <- rt(n_data, df)
# Perform Kolmogorov test (classical)
ks_test_classical <- ks.test(data, "pt", df)
rejection_kolmogorov_classical[i] <- as.integer(ks_test_classical$p.value < 0.05)
# Perform Kolmogorov test (PIT)
ks_test_pit <- ks.test(pnorm(data), "pt", df)
rejection_kolmogorov_pit[i] <- as.integer(ks_test_pit$p.value < 0.05)
# Perform chi-square test (classical)
chi2_test_classical <- chisq.test(table(cut(data, breaks = quantile(data, probs = seq(0, 1, 0.1)), include.lowest = TRUE)))
rejection_chi2_classical[i] <- as.integer(chi2_test_classical$p.value < 0.05)
# Perform chi-square test (PIT)
chi2_test_pit <- chisq.test(table(cut(pnorm(data), breaks = quantile(pnorm(data), probs = seq(0, 1, 0.1)), include.lowest = TRUE)))
rejection_chi2_pit[i] <- as.integer(chi2_test_pit$p.value < 0.05)
}
# Calculate rejection percentages
rejection_percentages <- data.frame(
Degrees_of_Freedom = df,
Kolmogorov_Classical = sum(rejection_kolmogorov_classical) / n_simulations * 100,
Kolmogorov_PIT = sum(rejection_kolmogorov_pit) / n_simulations * 100,
Chi2_Classical = sum(rejection_chi2_classical) / n_simulations * 100,
Chi2_PIT = sum(rejection_chi2_pit) / n_simulations * 100
)
return(rejection_percentages)
}
# Set parameters
n_data <- c(50, 100, 500)  # Number of data
df <- c(3, 5, 10, 30)      # Degrees of freedom
n_simulations <- 1000     # Number of simulations
# Perform tests and calculate rejection percentages
results <- data.frame()
for (n in n_data) {
for (d in df) {
res <- perform_tests(d, n, n_simulations)
results <- rbind(results, res)
}
}
ggplot(results, aes(x = Degrees_of_Freedom, y = Kolmogorov_Classical, color = as.factor(n_data))) +
geom_line() +
geom_point() +
labs(x = "Degrees of Freedom", y = "Rejection Percentage (%)", color = "Number of Data") +
ggtitle("Kolmogorov Test (Classical)") +
theme_minimal()
ggplot(results, aes(x = Degrees_of_Freedom, y = Chi2_Classical, color = as.factor(n_data))) +
geom_line() +
geom_point() +
labs(x = "Degrees of Freedom", y = "Rejection Percentage (%)", color = "Number of Data") +
ggtitle("Chi-square Test (Classical)") +
theme_minimal()
rlang::last_trace()
ggplot(results, aes(x = Degrees_of_Freedom, y = Kolmogorov_Classical, color = as.factor(n_data))) +
geom_line() +
geom_point() +
labs(x = "Degrees of Freedom", y = "Rejection Percentage (%)", color = "Number of Data") +
ggtitle("Kolmogorov Test (Classical)") +
theme_minimal()
ggplot(results, aes(x = Degrees_of_Freedom, y = Kolmogorov_Classical, color = as.factor(n_data))) +
geom_line() +
labs(x = "Degrees of Freedom", y = "Rejection Percentage (%)", color = "Number of Data") +
ggtitle("Kolmogorov Test (Classical)") +
theme_minimal()
ggplot(results, aes(x = Degrees_of_Freedom, y = Kolmogorov_Classical, color = as.factor(n_data))) +
geom_point() +
labs(x = "Degrees of Freedom", y = "Rejection Percentage (%)", color = "Number of Data") +
ggtitle("Kolmogorov Test (Classical)") +
theme_minimal()
ggplot(results, aes(x = Degrees_of_Freedom, y = Kolmogorov_Classical, color = as.factor(n_data))) +
geom_point() +
labs(x = "Degrees of Freedom", y = "Rejection Percentage (%)", color = "Number of Data")
results
results, aes(x = Degrees_of_Freedom, y = Kolmogorov_Classical, color = as.factor(n_data))
results
n_data
set.seed(1997)
# Function to perform the tests and calculate rejection percentage
perform_tests <- function(df, n_data, n_simulations) {
rejection_kolmogorov_classical <- vector("numeric", n_simulations)
rejection_kolmogorov_pit <- vector("numeric", n_simulations)
rejection_chi2_classical <- vector("numeric", n_simulations)
rejection_chi2_pit <- vector("numeric", n_simulations)
for (i in 1:n_simulations) {
# Generate data from t-Student distribution
data <- rt(n_data, df)
# Perform Kolmogorov test (classical)
ks_test_classical <- ks.test(data, "pt", df)
rejection_kolmogorov_classical[i] <- as.integer(ks_test_classical$p.value < 0.05)
# Perform Kolmogorov test (PIT)
ks_test_pit <- ks.test(pnorm(data), "pt", df)
rejection_kolmogorov_pit[i] <- as.integer(ks_test_pit$p.value < 0.05)
# Perform chi-square test (classical)
chi2_test_classical <- chisq.test(table(cut(data, breaks = quantile(data, probs = seq(0, 1, 0.1)), include.lowest = TRUE)))
rejection_chi2_classical[i] <- as.integer(chi2_test_classical$p.value < 0.05)
# Perform chi-square test (PIT)
chi2_test_pit <- chisq.test(table(cut(pnorm(data), breaks = quantile(pnorm(data), probs = seq(0, 1, 0.1)), include.lowest = TRUE)))
rejection_chi2_pit[i] <- as.integer(chi2_test_pit$p.value < 0.05)
}
# Calculate rejection percentages
rejection_percentages <- data.frame(
Degrees_of_Freedom = df,
Number_of_Data = n_data,
Kolmogorov_Classical = sum(rejection_kolmogorov_classical) / n_simulations * 100,
Kolmogorov_PIT = sum(rejection_kolmogorov_pit) / n_simulations * 100,
Chi2_Classical = sum(rejection_chi2_classical) / n_simulations * 100,
Chi2_PIT = sum(rejection_chi2_pit) / n_simulations * 100
)
return(rejection_percentages)
}
# Set parameters
n_data <- c(50, 100, 500)  # Number of data
df <- c(3, 5, 10, 30)      # Degrees of freedom
n_simulations <- 1000     # Number of simulations
# Perform tests and calculate rejection percentages
results <- data.frame()
for (n in n_data) {
for (d in df) {
res <- perform_tests(d, n, n_simulations)
results <- rbind(results, res)
}
}
# Plot the results
ggplot(results, aes(x = Degrees_of_Freedom, y = Kolmogorov_Classical, color = as.factor(Number_of_Data))) +
geom_line() +
geom_point() +
labs(x = "Degrees of Freedom", y = "Rejection Percentage (%)", color = "Number of Data") +
ggtitle("Kolmogorov Test (Classical)") +
theme_minimal()
View(results)
View(results)
# Generate data from t-Student distribution
data <- rt(n_data, df)
data
df <- 30
# Generate data from t-Student distribution
data <- rt(n_data, df)
data
n_data <- 30
df <- 10
# Generate data from t-Student distribution
data <- rt(n_data, df)
data
# Perform Kolmogorov test (classical)
ks_test_classical <- ks.test(data, "pt", df)
ks_test_classical
rejection_kolmogorov_classical[i] <- as.integer(ks_test_classical$p.value < 0.05)
# Perform Kolmogorov test (PIT)
ks_test_pit <- ks.test(pnorm(data), "pt", df)
# Perform Kolmogorov test (PIT)
ks_test_pit <- ks.test(pnorm(data), "pt", df)
ks_test_pit
# Perform Kolmogorov test (PIT)
ks_test_pit <- ks.test(pnorm(data), "pt", df)
ks_test_pit
ks_test_pit
# Generate data from t-Student distribution
data <- rt(n_data, df)
ks_test_pit
# Perform chi-square test (classical)
chi2_test_classical <- chisq.test(table(cut(data, breaks = quantile(data, probs = seq(0, 1, 0.1)), include.lowest = TRUE)))
chi2_test_classical
chisq.test(table(cut(data, breaks = quantile(data, probs = seq(0, 1, 0.1)), include.lowest = TRUE)))
table(cut(data, breaks = quantile(data, probs = seq(0, 1, 0.1)), include.lowest = TRUE))
cut(data, breaks = quantile(data, probs = seq(0, 1, 0.1))
cut(data, breaks = quantile(data, probs = seq(0, 1, 0.1)), include.lowest = TRUE)
cut(data, breaks = quantile(data, probs = seq(0, 1, 0.1)), include.lowest = TRUE)
quantile(data, probs = seq(0, 1, 0.1))
table(cut(data, breaks = quantile(data, probs = seq(0, 1, 0.1)), include.lowest = TRUE))
data
quantile(data, probs = seq(0, 1, 0.1))
breaks = quantile(data, probs = seq(0, 1, 0.1))
breaks
cut(data, breaks = quantile(data, probs = seq(0, 1, 0.1))
cut(data, breaks = quantile(data, probs = seq(0, 1, 0.1)), include.lowest = TRUE)
cut(data, breaks = quantile(data, probs = seq(0, 1, 0.1)), include.lowest = TRUE)
# Generate data from t-Student distribution
data <- rt(n_data, df)
table(cut(data, breaks = quantile(data, probs = seq(0, 1, 0.1)), include.lowest = TRUE))
table(cut(data, breaks = quantile(data, probs = seq(0, 1, 0.1)), include.lowest = TRUE))
table(cut(data, breaks = quantile(data, probs = seq(0, 1, 0.1)), include.lowest = TRUE))
data <- c(data, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
data
table(cut(data, breaks = quantile(data, probs = seq(0, 1, 0.1)), include.lowest = TRUE))
table(cut(data, breaks = quantile(data, probs = seq(0, 1, 0.1)), include.lowest = TRUE))
# Generate data from t-Student distribution
data <- rt(n_data, df)
data <- c(data, 1.124125, 1.2352352, 1.1234531, 1.1351234, 1.134134, 1.124263612, 1.1235, 1.2355, 1.345, 1.153, 1.113523, 1.1234, 1.163, 1.18443, 1.2978, 1.135434, 1.1345, 1.32523)
table(cut(data, breaks = quantile(data, probs = seq(0, 1, 0.1)), include.lowest = TRUE))
table(cut(data, breaks = quantile(data, probs = seq(0, 1, 0.1)), include.lowest = TRUE))
# Perform chi-square test (classical)
chi2_test_classical <- chisq.test(table(cut(data, breaks = quantile(data, probs = seq(0, 1, 0.1)), include.lowest = TRUE)))
chi2_test_classical
set.seed(1997)
# Function to perform the tests and calculate rejection percentage
perform_tests <- function(df, n_data, n_simulations) {
rejection_kolmogorov_classical <- vector("numeric", n_simulations)
rejection_kolmogorov_pit <- vector("numeric", n_simulations)
rejection_chi2_classical <- vector("numeric", n_simulations)
rejection_chi2_pit <- vector("numeric", n_simulations)
for (i in 1:n_simulations) {
# Generate data from t-Student distribution
data <- rt(n_data, df)
data <- c(data, 1.124125, 1.2352352, 1.1234531, 1.1351234, 1.134134, 1.124263612, 1.1235, 1.2355, 1.345, 1.153, 1.113523, 1.1234, 1.163, 1.18443, 1.2978, 1.135434, 1.1345, 1.32523)
# Perform Kolmogorov test (classical)
ks_test_classical <- ks.test(data, "pt", df)
rejection_kolmogorov_classical[i] <- as.integer(ks_test_classical$p.value < 0.05)
# Perform Kolmogorov test (PIT)
ks_test_pit <- ks.test(pnorm(data), "pt", df)
rejection_kolmogorov_pit[i] <- as.integer(ks_test_pit$p.value < 0.05)
# Perform chi-square test (classical)
obs_table_classical <- table(cut(data, breaks = quantile(data, probs = seq(0, 1, 0.1)), include.lowest = TRUE))
exp_table_classical <- dchisq(seq(0, 1, 0.1) * attr(obs_table_classical, "table"), df)
chi2_test_classical <- chisq.test(obs_table_classical, p = exp_table_classical)
rejection_chi2_classical[i] <- as.integer(chi2_test_classical$p.value < 0.05)
# Perform chi-square test (PIT)
obs_table_pit <- table(cut(pnorm(data), breaks = quantile(pnorm(data), probs = seq(0, 1, 0.1)), include.lowest = TRUE))
exp_table_pit <- dchisq(seq(0, 1, 0.1) * attr(obs_table_pit, "table"), df)
chi2_test_pit <- chisq.test(obs_table_pit, p = exp_table_pit)
rejection_chi2_pit[i] <- as.integer(chi2_test_pit$p.value < 0.05)
}
# Calculate rejection percentages
rejection_percentages <- data.frame(
Degrees_of_Freedom = df,
Number_of_Data = n_data,
Kolmogorov_Classical = sum(rejection_kolmogorov_classical) / n_simulations * 100,
Kolmogorov_PIT = sum(rejection_kolmogorov_pit) / n_simulations * 100,
Chi2_Classical = sum(rejection_chi2_classical) / n_simulations * 100,
Chi2_PIT = sum(rejection_chi2_pit) / n_simulations * 100
)
return(rejection_percentages)
}
# Set parameters
n_data <- c(50, 100, 500)  # Number of data
df <- c(3, 5, 10, 30)      # Degrees of freedom
n_simulations <- 1000     # Number of simulations
# Perform tests and calculate rejection percentages
results <- data.frame()
for (n in n_data) {
for (d in df) {
res <- perform_tests(d, n, n_simulations)
results <- rbind(results, res)
}
}
