}
# Function to calculate the percentage of rejections for given parameters and approach
calculate_rejection_percentage <- function(n, alpha, beta, delta, mu, shape, rate, approach) {
num_trials <- 1000
num_rejections <- 0
for (i in 1:num_trials) {
if (distribution == "nig") {
# Generate samples from NIG distribution
samples <- generate_nig_samples(n, alpha, beta, delta, mu)
} else {
# Generate samples from gamma distribution
samples <- generate_gamma_samples(n, shape, rate)
}
if (approach == "classical") {
# Perform the Kolmogorov test using the classical approach
if (perform_kolmogorov_test_classical(samples, distribution)) {
num_rejections <- num_rejections + 1
}
} else {
# Perform the Kolmogorov test using the PIT approach
if (perform_kolmogorov_test_pit(samples)) {
num_rejections <- num_rejections + 1
}
}
}
rejection_percentage <- num_rejections / num_trials * 100
return(rejection_percentage)
}
## Stworzenie danych dla testów
```{r dane}
# Sample sizes to consider
sample_sizes <- c(50, 100, 200, 500, 1000)
# NIG parameters to consider
nig_params <- data.frame(
alpha = c(1, 2, 3),
beta = c(0.5, 1, 1.5),
delta = c(-1, 0, 1),
mu = c(0, 1, 2)
)
# Gamma parameters to consider
gamma_params <- data.frame(
shape = c(1, 2, 3),
rate = c(0.5, 1, 1.5)
)
# Initialize result matrices
classical_results_nig <- matrix(0, nrow = nrow(nig_params), ncol = length(sample_sizes))
pit_results_nig <- matrix(0, nrow = nrow(nig_params), ncol = length(sample_sizes))
classical_results_gamma <- matrix(0, nrow = nrow(gamma_params), ncol = length(sample_sizes))
pit_results_gamma <- matrix(0, nrow = nrow(gamma_params), ncol = length(sample_sizes))
## Zastosowanie funkcji do danych
```{r power, warning=FALSE}
# Perform simulations for NIG distribution using both approaches
for (i in 1:nrow(nig_params)) {
for (j in 1:length(sample_sizes)) {
alpha <- nig_params$alpha[i]
beta <- nig_params$beta[i]
delta <- nig_params$delta[i]
mu <- nig_params$mu[i]
classical_results_nig[i, j] <- calculate_rejection_percentage(
sample_sizes[j], alpha, beta, delta, mu, NULL, NULL, "classical"
)
pit_results_nig[i, j] <- calculate_rejection_percentage(
sample_sizes[j], alpha, beta, delta, mu, NULL, NULL, "pit"
)
}
}
install.packages("PIT")
library("PIT")
library(PIT)
library(scoringutils)
install.packages("scoringutils")
library(PIT)
install.packages("pit")
setwd("D:/Dokumenty/Studia/Semestr_4/MNWS/zadanie_8")
setwd("D:/Dokumenty/Studia/Semestr_4/MNWS/zadanie_8")
setwd("D:/Dokumenty/Studia/Semestr_4/MNWS/zadanie_7")
setwd("D:/Dokumenty/Studia/Semestr_4/MNWS/zadanie_6")
library(nortest)
# Function to compute the power of the Kolmogorov test
compute_kolmogorov_power <- function(data, n_simulations, alpha) {
power <- rep(0, n_simulations)
for (i in 1:n_simulations) {
# Generate random samples from the hypothesized distribution
simulated_data <- data()
# Perform the Kolmogorov test
ks_test <- ks.test(simulated_data, "pnorm")
# Check if the null hypothesis is rejected
if (ks_test$p.value < alpha) {
power[i] <- 1
}
}
return(mean(power))
}
# Function to compute the power of the Lilliefors test
compute_lilliefors_power <- function(data, n_simulations, alpha) {
power <- rep(0, n_simulations)
for (i in 1:n_simulations) {
# Generate random samples from the hypothesized distribution
simulated_data <- data()
# Perform the Lilliefors test
lilliefors_test <- lillie.test(simulated_data)
# Check if the null hypothesis is rejected
if (lilliefors_test$p.value < alpha) {
power[i] <- 1
}
}
return(mean(power))
}
# Function to compute the power of the Anderson-Darling test
compute_anderson_power <- function(data, n_simulations, alpha) {
power <- rep(0, n_simulations)
for (i in 1:n_simulations) {
# Generate random samples from the hypothesized distribution
simulated_data <- data()
# Perform the Anderson-Darling test
anderson_test <- ad.test(simulated_data)
# Check if the null hypothesis is rejected
if (anderson_test$statistic > anderson_test$critical$`0.05`[1]) {
power[i] <- 1
}
}
return(mean(power))
}
# Function to generate data from t-Student distribution
generate_t_data <- function(n, df) {
standardized_data <- rt(n, df)
standardized_data <- (standardized_data - mean(standardized_data)) / sd(standardized_data)
return(standardized_data)
}
## Stworzenie danych dla testów
```{r dane}
# Parameters
n_data <- c(50, 100, 200)  # Number of data
# Parameters
n_data <- c(50, 100, 200)  # Number of data
df_t <- c(3, 5, 10)  # Degrees of freedom for t-distribution
n_simulations <- 1000  # Number of simulations
alpha <- 0.05  # Significance level
# Perform simulations for different settings
kolmogorov_results <- matrix(0, nrow = length(n_data), ncol = length(df_t))
lilliefors_results <- matrix(0, nrow = length(n_data), ncol = length(df_t))
anderson_results <- matrix(0, nrow = length(n_data), ncol = length(df_t))
colnames(kolmogorov_results) <- colnames(lilliefors_results) <- colnames(anderson_results) <- df_t
for (i in 1:length(n_data)) {
n <- n_data[i]
for (j in 1:length(df_t)) {
df <- df_t[j]
data_func <- function() generate_t_data(n, df)
# Compute power of each test
kolmogorov_power <- compute_kolmogorov_power(data_func, n_simulations, alpha)
lilliefors_power <- compute_lilliefors_power(data_func, n_simulations, alpha)
anderson_power <- compute_anderson_power(data_func, n_simulations, alpha)
# Store results
kolmogorov_results[i, j] <- kolmogorov_power
lilliefors_results[i, j] <- lilliefors_power
anderson_results[i, j] <- anderson_power
}
}
setwd("D:/Dokumenty/Studia/Semestr_4/MNWS/zadanie_5")
# Function to perform Kolmogorov-Smirnov test
ks_test <- function(data, distribution) {
ks_result <- ks.test(data, distribution)
return(ks_result$p.value)
}
# Function to perform Chi-squared test
chi2_test <- function(data, distribution) {
chi2_result <- chisq.test(data, p = distribution)
return(chi2_result$p.value)
}
# Function to perform PIT-based test
pit_test <- function(data, distribution) {
ecdf_data <- ecdf(data)
uniform_samples <- runif(length(data))
transformed_data <- quantile(distribution, uniform_samples)
pit_result <- ks_test(transformed_data, ecdf_data)
return(pit_result)
}
# Function to generate data from t-Student distribution
generate_t_student <- function(n, df) {
return(rt(n, df))
}
# Function to generate data from t-Student distribution
generate_t_student <- function(n, df) {
return(rt(n, df))
}
## Zastosowanie funkcji do danych
```{r power, warning=FALSE}
# Function to generate data from t-Student distribution
generate_t_student <- function(n, df) {
return(rt(n, df))
}
# Set the parameters for the simulation
n_values <- c(50, 100, 200)  # Number of data points
df_values <- c(3, 5, 10)     # Degrees of freedom
num_simulations <- 1000      # Number of simulations
# Set the parameters for the simulation
n_values <- c(50, 100, 200)  # Number of data points
n_values
n_values
n_values
# Set the parameters for the simulation
n_values <- c(50, 100, 200)  # Number of data points
df_values <- c(3, 5, 10)     # Degrees of freedom
num_simulations <- 1000      # Number of simulations
alpha <- 0.05                # Significance level for hypothesis testing
results <- data.frame()
for (n in n_values) {
for (df in df_values) {
# Initialize counters
ks_reject <- 0
chi2_reject <- 0
pit_reject <- 0
for (i in 1:num_simulations) {
# Generate data from t-Student distribution
data <- generate_t_student(n, df)
# Perform Kolmogorov-Smirnov test
ks_p_value <- ks_test(data, pt)
if (ks_p_value < alpha) {
ks_reject <- ks_reject + 1
}
# Perform Chi-squared test
chi2_p_value <- chi2_test(data, pt)
if (chi2_p_value < alpha) {
chi2_reject <- chi2_reject + 1
}
# Perform PIT-based test
pit_p_value <- pit_test(data, pt)
if (pit_p_value < alpha) {
pit_reject <- pit_reject + 1
}
}
# Compute rejection percentages
ks_reject_percent <- ks_reject / num_simulations * 100
chi2_reject_percent <- chi2_reject / num_simulations * 100
pit_reject_percent <- pit_reject / num_simulations * 100
# Store the results
result <- data.frame(
N = n,
Degrees_of_Freedom = df,
Kolmogorov_Test_Reject = ks_reject_percent,
ChiSquared_Test_Reject = chi2_reject_percent,
PIT_Test_Reject = pit_reject_percent
)
results <- rbind(results, result)
}
}
for (n in n_values) {
for (df in df_values) {
# Initialize counters
ks_reject <- 0
chi2_reject <- 0
pit_reject <- 0
for (i in 1:num_simulations) {
# Generate data from t-Student distribution
data <- generate_t_student(n, df)
# Perform Kolmogorov-Smirnov test
ks_p_value <- ks_test(data, pt)
if (ks_p_value < alpha) {
ks_reject <- ks_reject + 1
}
# Perform Chi-squared test
chi2_p_value <- chi2_test(data, pt)
if (chi2_p_value < alpha) {
chi2_reject <- chi2_reject + 1
}
# Perform PIT-based test
pit_p_value <- pit_test(data, pt)
if (pit_p_value < alpha) {
pit_reject <- pit_reject + 1
}
}
# Compute rejection percentages
ks_reject_percent <- ks_reject / num_simulations * 100
chi2_reject_percent <- chi2_reject / num_simulations * 100
pit_reject_percent <- pit_reject / num_simulations * 100
# Store the results
result <- data.frame(
N = n,
Degrees_of_Freedom = df,
Kolmogorov_Test_Reject = ks_reject_percent,
ChiSquared_Test_Reject = chi2_reject_percent,
PIT_Test_Reject = pit_reject_percent
)
results <- rbind(results, result)
}
}
df_values
df
df
for (n in n_values) {
for (df in df_values) {
# Initialize counters
ks_reject <- 0
chi2_reject <- 0
pit_reject <- 0
for (i in 1:num_simulations) {
# Generate data from t-Student distribution
data <- generate_t_student(n, df)
print(1)
# Perform Kolmogorov-Smirnov test
ks_p_value <- ks_test(data, pt)
if (ks_p_value < alpha) {
ks_reject <- ks_reject + 1
}
print(2)
# Perform Chi-squared test
chi2_p_value <- chi2_test(data, pt)
if (chi2_p_value < alpha) {
chi2_reject <- chi2_reject + 1
}
print(3)
# Perform PIT-based test
pit_p_value <- pit_test(data, pt)
if (pit_p_value < alpha) {
pit_reject <- pit_reject + 1
}
}
print(4)
# Compute rejection percentages
ks_reject_percent <- ks_reject / num_simulations * 100
chi2_reject_percent <- chi2_reject / num_simulations * 100
pit_reject_percent <- pit_reject / num_simulations * 100
# Store the results
result <- data.frame(
N = n,
Degrees_of_Freedom = df,
Kolmogorov_Test_Reject = ks_reject_percent,
ChiSquared_Test_Reject = chi2_reject_percent,
PIT_Test_Reject = pit_reject_percent
)
results <- rbind(results, result)
}
}
ks_test(data, pt)
for (n in n_values) {
for (df in df_values) {
# Initialize counters
ks_reject <- 0
chi2_reject <- 0
pit_reject <- 0
for (i in 1:num_simulations) {
# Generate data from t-Student distribution
data <- generate_t_student(n, df)
print(1)
# Perform Kolmogorov-Smirnov test
ks_p_value <- ks_test(data, pt, df)
if (ks_p_value < alpha) {
ks_reject <- ks_reject + 1
}
print(2)
# Perform Chi-squared test
chi2_p_value <- chi2_test(data, pt)
if (chi2_p_value < alpha) {
chi2_reject <- chi2_reject + 1
}
print(3)
# Perform PIT-based test
pit_p_value <- pit_test(data, pt)
if (pit_p_value < alpha) {
pit_reject <- pit_reject + 1
}
}
print(4)
# Compute rejection percentages
ks_reject_percent <- ks_reject / num_simulations * 100
chi2_reject_percent <- chi2_reject / num_simulations * 100
pit_reject_percent <- pit_reject / num_simulations * 100
# Store the results
result <- data.frame(
N = n,
Degrees_of_Freedom = df,
Kolmogorov_Test_Reject = ks_reject_percent,
ChiSquared_Test_Reject = chi2_reject_percent,
PIT_Test_Reject = pit_reject_percent
)
results <- rbind(results, result)
}
}
ks_p_value <- ks_test(data, pt)
```{r funkcje}
```{r funkcje}
```{r funkcje}
```{
```{r funkcje}
```{r funkcje}
# Function to perform Kolmogorov-Smirnov test
ks_test <- function(data, distribution, df) {
ks_result <- ks.test(data, distribution,df)
return(ks_result$p.value)
}
# Function to perform Kolmogorov-Smirnov test
ks_test <- function(data, distribution, df) {
ks_result <- ks.test(data, distribution,df)
return(ks_result$p.value)
}
# Function to perform Kolmogorov-Smirnov test
ks_test <- function(data, distribution, df) {
ks_result <- ks.test(data, distribution,df)
return(ks_result$p.value)
}
# Function to perform Kolmogorov-Smirnov test
ks_test <- function(data, distribution, df) {
ks_result <- ks.test(data, distribution,df)
return(ks_result$p.value)
}
# Function to perform Kolmogorov-Smirnov test
ks_test <- function(data, distribution, df) {
ks_result <- ks.test(data, distribution,df)
return(ks_result$p.value)
}
# Function to perform Kolmogorov-Smirnov test
ks_test <- function(data, distribution, df) {
ks_result <- ks.test(data, distribution,df)
return(ks_result$p.value)
}
# Function to perform Chi-squared test
chi2_test <- function(data, distribution) {
chi2_result <- chisq.test(data, p = distribution)
return(chi2_result$p.value)
}
# Function to perform PIT-based test
pit_test <- function(data, distribution) {
ecdf_data <- ecdf(data)
uniform_samples <- runif(length(data))
transformed_data <- quantile(distribution, uniform_samples)
pit_result <- ks_test(transformed_data, ecdf_data)
return(pit_result)
}
# Function to generate data from t-Student distribution
generate_t_student <- function(n, df) {
return(rt(n, df))
}
# Function to generate data from t-Student distribution
generate_t_student <- function(n, df) {
return(rt(n, df))
}
## Zastosowanie funkcji do danych
```{r power, warning=FALSE}
# Set the parameters for the simulation
n_values <- c(50, 100, 200)  # Number of data points
df_values <- c(3, 5, 10)     # Degrees of freedom
num_simulations <- 1000      # Number of simulations
alpha <- 0.05                # Significance level for hypothesis testing
results <- data.frame()
for (n in n_values) {
for (df in df_values) {
# Initialize counters
ks_reject <- 0
chi2_reject <- 0
pit_reject <- 0
for (i in 1:num_simulations) {
# Generate data from t-Student distribution
data <- generate_t_student(n, df)
print(1)
# Perform Kolmogorov-Smirnov test
ks_p_value <- ks_test(data, pt, df)
if (ks_p_value < alpha) {
ks_reject <- ks_reject + 1
}
print(2)
# Perform Chi-squared test
chi2_p_value <- chi2_test(data, pt)
if (chi2_p_value < alpha) {
chi2_reject <- chi2_reject + 1
}
print(3)
# Perform PIT-based test
pit_p_value <- pit_test(data, pt)
if (pit_p_value < alpha) {
pit_reject <- pit_reject + 1
}
}
print(4)
# Compute rejection percentages
ks_reject_percent <- ks_reject / num_simulations * 100
chi2_reject_percent <- chi2_reject / num_simulations * 100
pit_reject_percent <- pit_reject / num_simulations * 100
# Store the results
result <- data.frame(
N = n,
Degrees_of_Freedom = df,
Kolmogorov_Test_Reject = ks_reject_percent,
ChiSquared_Test_Reject = chi2_reject_percent,
PIT_Test_Reject = pit_reject_percent
)
results <- rbind(results, result)
}
}
distribution
distribution
distribution
distribution
distribution
distribution
distribution
distribution
distribution
distribution
distribution
distribution
distribution
distribution
pt
pt
distribution
chi2_test <- function(data, distribution) {
chi2_result <- chisq.test(data, p = distribution)
return(chi2_result$p.value)
}
chi2_test(data, pt)
chi2_test(data, pt)
pt
