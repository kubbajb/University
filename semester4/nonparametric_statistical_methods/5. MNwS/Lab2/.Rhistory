library(tidyr)
install.packages("tidyr")
library(tidyr)
library(dplyr)
library(ggplot2)
#ilosc sym
N <- 1000
#wart ocz
mus <- seq(.1, 1, by = .1)
#poziomy ist
alphas <- c(.001, .01, .05, .1)
#dlugosc proby
lengths <- seq(10, 20, by = 2)
#ramka danych z kazda mozliwa 3 z tych wartosci
params <- expand.grid(mus, alphas, lengths)
View(params)
names(params) <- c("mu", "alpha", "length")
str(params)
now <- Sys.time()
now <- Sys.time()
#dla kazdej 3 liczymy moc testu
powers <- sapply(1:nrow(params),
function(i){
mu <- params[i, 1]
alpha <- params[i, 2]
n <- params[i, 3]
p_vector <- sapply(rep(mu, N), function(x){
my_sample <- rnorm(n, x)
t.test(my_sample)$p.value
})
mean(p_vector < alpha)
})
Sys.time() - now #ile czasu się wykonywało
power_df <- bind_cols(params, power = powers)
glimpse(power_df)
View(power_df)
power_df %>%
ggplot(aes(x = mu, y = power, color = factor(length))) +
geom_line() +
facet_wrap(~ alpha, nrow = 2)
#####JAK DŁUGOSC PROBY WPŁYWA NA MOC?
sample_l <- 100:200
#stopnie swobody
df <- 30
#poziom istotności
alpha <- 0.05
#liczba symulacji
N <- 1000
p_samples <- tibble(p = 1, n = 1)
View(p_samples)
for(n in sample_l){
p_sim <-sapply(rep(df, N), function(x){
my_sample <- rt(n, df)
shapiro.test(my_sample)$p.value
})
samples <- tibble(p = p_sim, n = n)
p_samples <- bind_rows(p_samples, samples)
}
p_samples <- p_samples %>% filter(n > 1)
glimpse(p_samples)
View(p_samples)
powers <- p_samples %>%
group_by(n) %>%
summarise(power = sum(p < alpha) / n())
powers
powers %>% ggplot(aes(x = n, y = power)) +
geom_line()
#długość próby
sample_l <- 100
#stopnie swobody
df <- 3:100
#poziom istotności
alpha <- 0.05
#liczba symulacji
N <- 1000
p_samples <- tibble(p = 1, df = 1)
for(x in df){
p_sim <- sapply(rep(x, N), function(x){
my_sample <- rt(sample_l, x)
shapiro.test(my_sample)$p.value
})
samples <- tibble(p = p_sim, df = x)
p_samples <- bind_rows(p_samples, samples)
}
p_samples <- p_samples %>% filter(df > 1)
glimpse(p_samples)
powers <- p_samples %>%
group_by(df) %>%
summarise(power = mean(p < alpha))
powers
powers %>% ggplot(aes(x = df, y = power)) +
geom_line()
#długość próby
sample_l <- 200
#stopnie swobody
df <- 3:100
#poziom istotności
alpha <- 0.05
#liczba symulacji
N <- 1000
p_samples <- tibble(p = 1, df = 1)
for(x in df){
p_sim <- sapply(rep(x, N), function(x){
my_sample <- rt(sample_l, x)
shapiro.test(my_sample)$p.value
})
samples <- tibble(p = p_sim, df = x)
p_samples <- bind_rows(p_samples, samples)
}
p_samples <- p_samples %>% filter(df > 1)
glimpse(p_samples)
powers <- p_samples %>%
group_by(df) %>%
summarise(power = mean(p < alpha))
powers
powers %>% ggplot(aes(x = df, y = power)) +
geom_line()
#długość próby
sample_l <- 400
for(x in df){
p_sim <- sapply(rep(x, N), function(x){
my_sample <- rt(sample_l, x)
shapiro.test(my_sample)$p.value
})
samples <- tibble(p = p_sim, df = x)
p_samples <- bind_rows(p_samples, samples)
}
p_samples <- p_samples %>% filter(df > 1)
glimpse(p_samples)
powers <- p_samples %>%
group_by(df) %>%
summarise(power = mean(p < alpha))
powers
powers %>% ggplot(aes(x = df, y = power)) +
geom_line()
#długość próby
sample_l <- 500
for(x in df){
p_sim <- sapply(rep(x, N), function(x){
my_sample <- rt(sample_l, x)
shapiro.test(my_sample)$p.value
})
samples <- tibble(p = p_sim, df = x)
p_samples <- bind_rows(p_samples, samples)
}
p_samples <- p_samples %>% filter(df > 1)
glimpse(p_samples)
powers <- p_samples %>%
group_by(df) %>%
summarise(power = mean(p < alpha))
powers
powers %>% ggplot(aes(x = df, y = power)) +
geom_line()
powers %>% ggplot(aes(x = df, y = power)) +
geom_line()
#stopnie swobody
df <- 30:100
for(x in df){
p_sim <- sapply(rep(x, N), function(x){
my_sample <- rt(sample_l, x)
shapiro.test(my_sample)$p.value
})
samples <- tibble(p = p_sim, df = x)
p_samples <- bind_rows(p_samples, samples)
}
p_samples <- p_samples %>% filter(df > 1)
glimpse(p_samples)
powers <- p_samples %>%
group_by(df) %>%
summarise(power = mean(p < alpha))
powers
powers %>% ggplot(aes(x = df, y = power)) +
geom_line()
powers %>% ggplot(aes(x = df, y = power)) +
geom_line()
for(x in df){
p_sim <- sapply(rep(x, N), function(x){
my_sample <- rt(sample_l, x)
shapiro.test(my_sample)$p.value
})
samples <- tibble(p = p_sim, df = x)
p_samples <- bind_rows(p_samples, samples)
}
p_samples <- p_samples %>% filter(df > 1)
glimpse(p_samples)
powers <- p_samples %>%
group_by(df) %>%
summarise(power = mean(p < alpha))
powers
powers %>% ggplot(aes(x = df, y = power)) +
geom_line()
#długość próby
sample_l <- 400
#stopnie swobody
df <- 30:100
#poziom istotności
alpha <- 0.05
#liczba symulacji
N <- 1000
for(x in df){
p_sim <- sapply(rep(x, N), function(x){
my_sample <- rt(sample_l, x)
shapiro.test(my_sample)$p.value
})
samples <- tibble(p = p_sim, df = x)
p_samples <- bind_rows(p_samples, samples)
}
p_samples <- tibble(p = 1, df = 1)
p_samples <- p_samples %>% filter(df > 1)
glimpse(p_samples)
powers <- p_samples %>%
group_by(df) %>%
summarise(power = mean(p < alpha))
powers
powers %>% ggplot(aes(x = df, y = power)) +
geom_line()
powers %>% ggplot(aes(x = df, y = power)) +
geom_line()
#długość próby
sample_l <- 300
#stopnie swobody
df <- 30:100
#poziom istotności
alpha <- 0.05
#liczba symulacji
N <- 1000
p_samples <- tibble(p = 1, df = 1)
for(x in df){
p_sim <- sapply(rep(x, N), function(x){
my_sample <- rt(sample_l, x)
shapiro.test(my_sample)$p.value
})
samples <- tibble(p = p_sim, df = x)
p_samples <- bind_rows(p_samples, samples)
}
p_samples <- p_samples %>% filter(df > 1)
glimpse(p_samples)
powers <- p_samples %>%
group_by(df) %>%
summarise(power = mean(p < alpha))
powers
powers %>% ggplot(aes(x = df, y = power)) +
geom_line()
#długość próby
sample_l <- 500
for(x in df){
p_sim <- sapply(rep(x, N), function(x){
my_sample <- rt(sample_l, x)
shapiro.test(my_sample)$p.value
})
samples <- tibble(p = p_sim, df = x)
p_samples <- bind_rows(p_samples, samples)
}
p_samples <- p_samples %>% filter(df > 1)
glimpse(p_samples)
powers <- p_samples %>%
group_by(df) %>%
summarise(power = mean(p < alpha))
powers
powers %>% ggplot(aes(x = df, y = power)) +
geom_line()
sample_l <- 100
View(samples)
#długość próby
sample_l <- 500
#stopnie swobody
df <- 30:100
#poziom istotności
alpha <- 0.05
#liczba symulacji
N <- 1000
p_samples <- tibble(p = 1, df = 1)
for(x in df){
p_sim <- sapply(rep(x, N), function(x){
my_sample <- rt(sample_l, x)
shapiro.test(my_sample)$p.value
})
samples <- tibble(p = p_sim, df = x)
p_samples <- bind_rows(p_samples, samples)
}
p_samples <- p_samples %>% filter(df > 1)
glimpse(p_samples)
powers <- p_samples %>%
group_by(df) %>%
summarise(power = mean(p < alpha))
powers
powers %>% ggplot(aes(x = df, y = power)) +
geom_line()
#długość próby
sample_l <- 500
#stopnie swobody
df <- 3:100
#poziom istotności
alpha <- 0.05
#liczba symulacji
N <- 1000
p_samples <- tibble(p = 1, df = 1)
for(x in df){
p_sim <- sapply(rep(x, N), function(x){
my_sample <- rt(sample_l, x)
shapiro.test(my_sample)$p.value
})
samples <- tibble(p = p_sim, df = x)
p_samples <- bind_rows(p_samples, samples)
}
p_samples <- p_samples %>% filter(df > 1)
glimpse(p_samples)
powers <- p_samples %>%
group_by(df) %>%
summarise(power = mean(p < alpha))
powers
powers %>% ggplot(aes(x = df, y = power)) +
geom_line()
library(tidyr)
library(dplyr)
library(ggplot2)
#ilosc sym
N <- 1000
#wart ocz
mus <- seq(.1, 1, by = .1)
#poziomy ist
alphas <- c(.001, .01, .05, .1)
#dlugosc proby
lengths <- seq(10, 20, by = 2)
#ramka danych z kazda mozliwa 3 z tych wartosci
params <- expand.grid(mus, alphas, lengths)
View(params)
names(params) <- c("mu", "alpha", "length")
str(params)
set.seed(999)
now <- Sys.time()
now <- Sys.time()
#dla kazdej 3 liczymy moc testu
powers <- sapply(1:nrow(params),
function(i){
mu <- params[i, 1]
alpha <- params[i, 2]
n <- params[i, 3]
p_vector <- sapply(rep(mu, N), function(x){
my_sample <- rnorm(n, x)
t.test(my_sample)$p.value
})
mean(p_vector < alpha)
})
Sys.time() - now #ile czasu się wykonywało
power_df <- bind_cols(params, power = powers)
glimpse(power_df)
View(power_df)
power_df <- bind_cols(params, power = powers)
power_df %>%
ggplot(aes(x = mu, y = power, color = factor(length))) +
geom_line() +
facet_wrap(~ alpha, nrow = 2)
power_wide <-
power_df %>%
spread(length, power)
View(power_wide)
power_wide <-
power_df %>%
spread(length, power)
View(power_wide)
power_wide %>%
ggplot(aes(x = mu, y = `16`, col = factor(alpha))) +
geom_line()
ks.test(my_sample, pnorm, simulate.p.value = T)$p.value
#####JAK DŁUGOSC PROBY WPŁYWA NA MOC?
sample_l <- 100:200
#stopnie swobody
df <- 30
#poziom istotności
alpha <- 0.05
#liczba symulacji
N <- 1000
p_samples <- tibble(p = 1, n = 1)
for(n in sample_l){
p_sim <-sapply(rep(df, N), function(x){
my_sample <- rt(n, df)
ks.test(my_sample, pnorm, simulate.p.value = T)$p.value
})
samples <- tibble(p = p_sim, n = n)
p_samples <- bind_rows(p_samples, samples)
}
p_samples <- p_samples %>% filter(n > 1)
glimpse(p_samples)
for(n in sample_l){
p_sim <-sapply(rep(df, N), function(x){
my_sample <- rt(n, df)
ks.test(my_sample, pnorm)$p.value
})
samples <- tibble(p = p_sim, n = n)
p_samples <- bind_rows(p_samples, samples)
}
p_samples <- p_samples %>% filter(n > 1)
glimpse(p_samples)
powers <- p_samples %>%
group_by(n) %>%
summarise(power = sum(p < alpha) / n())
powers
powers %>% ggplot(aes(x = n, y = power)) +
geom_line()
#####JAK DŁUGOSC PROBY WPŁYWA NA MOC?
sample_l <- 30:200
for(n in sample_l){
p_sim <-sapply(rep(n, N), function(x){
my_sample <- rt(n, df)
ks.test(my_sample, pnorm)$p.value
})
samples <- tibble(p = p_sim, n = n)
p_samples <- bind_rows(p_samples, samples)
}
p_samples <- p_samples %>% filter(n > 1)
glimpse(p_samples)
powers <- p_samples %>%
group_by(n) %>%
summarise(power = sum(p < alpha) / n())
powers
powers %>% ggplot(aes(x = n, y = power)) +
geom_line()
for(n in sample_l){
p_sim <-sapply(rep(n, N), function(x){
my_sample <- rt(n, df)
ks.test(my_sample, "pnorm")$p.value
})
samples <- tibble(p = p_sim, n = n)
p_samples <- bind_rows(p_samples, samples)
}
p_samples <- p_samples %>% filter(n > 1)
glimpse(p_samples)
powers <- p_samples %>%
group_by(n) %>%
summarise(power = sum(p < alpha) / n())
powers
powers %>% ggplot(aes(x = n, y = power)) +
geom_line()
#wart ocz
mus <- seq(.1, 1, by = .1)
#poziomy ist
alphas <- c(.001, .01, .05, .1)
#dlugosc proby
lengths <- seq(10, 20, by = 2)
#ramka danych z kazda mozliwa 3 z tych wartosci
params <- expand.grid(mus, alphas, lengths)
View(params)
names(params) <- c("mu", "alpha", "length")
str(params)
set.seed(999)
now <- Sys.time()
#dla kazdej 3 liczymy moc testu
powers <- sapply(1:nrow(params),
function(i){
mu <- params[i, 1]
alpha <- params[i, 2]
n <- params[i, 3]
p_vector <- sapply(rep(mu, N), function(x){
my_sample <- rnorm(n, x)
t.test(my_sample)$p.value
})
mean(p_vector < alpha)
})
#dla kazdej 3 liczymy moc testu
powers <- sapply(1:nrow(params),
function(i){
mu <- params[i, 1]
alpha <- params[i, 2]
n <- params[i, 3]
p_vector <- sapply(rep(mu, N), function(x){
my_sample <- rnorm(n, x)
t.test(my_sample)$p.value
})
mean(p_vector < alpha)
})
power_df <- bind_cols(params, power = powers)
power_df %>%
ggplot(aes(x = mu, y = power, color = factor(length))) +
geom_line() +
facet_wrap(~ alpha, nrow = 2)
library("tseries", lib.loc="D:/PROGRAMY/R/R-3.4.2/library")
